name: Build and Upload Wheel to Release

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - main
permissions:
  contents: write
  id-token: write
jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      created: ${{ steps.create_tag.outputs.created }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Load .env
        uses: c-py/action-dotenv-to-setenv@v2

      # Same as before ...
      - name: Inject version from VERSION_TAG into pyproject.toml
        id: inject
        run: |
          VERSION="${VERSION_TAG#v}"
          echo "Injecting version $VERSION into pyproject.toml"
          sed -i.bak -E "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          cat pyproject.toml | grep version

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if git ls-remote --tags origin "refs/tags/$TAG" | grep "$TAG"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag if needed
        id: create_tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}
          echo "created=true" >> $GITHUB_OUTPUT

  build:
    needs: tag
    if: needs.tag.outputs.created == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Inject version into pyproject.toml
        run: |
          VERSION="${{ needs.tag.outputs.version }}"
          sed -i.bak -E "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          cat pyproject.toml | grep version


      - name: Build wheel
        run: |
          pip install build
          python -m build --wheel
      - name: Find wheel file
        id: wheel
        run: echo "WHEEL=$(ls dist/*.whl)" >> $GITHUB_OUTPUT


          
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.tag.outputs.version }}
          files: dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GCP credentials file
        run: echo '${{ secrets.GCP_CREDENTIALS }}' > ${{ runner.temp }}/gcp-key.json
      
      - name: Upload to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: ${{ steps.wheel.outputs.WHEEL }}
          destination:  silkworks_carbon_wheels/common_utils
          parent: false
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/gcp-key.json
